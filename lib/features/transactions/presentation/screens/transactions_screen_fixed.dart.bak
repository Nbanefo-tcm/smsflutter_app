import 'package:flutter/material.dart';

// Enum for transaction status
enum TransactionStatus {
  success,
  refunded,
  failed,
}

// Class for transaction data
class Transaction {
  final String id;
  final String serviceName;
  final String amount;
  final String dateTime;
  final TransactionStatus status;
  final IconData icon;

  const Transaction({
    required this.id,
    required this.serviceName,
    required this.amount,
    required this.dateTime,
    required this.status,
    required this.icon,
  });

  // Helper method to get status color
  Color getStatusColor() {
    switch (status) {
      case TransactionStatus.success:
        return Colors.green;
      case TransactionStatus.refunded:
        return Colors.orange;
      case TransactionStatus.failed:
        return Colors.red;
    }
  }

  // Helper method to get status text
  String getStatusText() {
    return status.toString().split('.').last;
  }
}

class TransactionsScreen extends StatefulWidget {
  const TransactionsScreen({super.key});

  @override
  State<TransactionsScreen> createState() => _TransactionsScreenState();
}

class _TransactionsScreenState extends State<TransactionsScreen> {
  final List<Transaction> _transactions = const [
    Transaction(
      id: 'TXN-12345',
      serviceName: 'Airtime Purchase',
      amount: '₦1,500',
      dateTime: 'Today, 2:30 PM',
      status: TransactionStatus.success,
      icon: Icons.phone_android,
    ),
    Transaction(
      id: 'TXN-12346',
      serviceName: 'Data Bundle',
      amount: '₦2,500',
      dateTime: 'Yesterday, 4:15 PM',
      status: TransactionStatus.success,
      icon: Icons.data_usage,
    ),
    Transaction(
      id: 'TXN-12347',
      serviceName: 'Electricity Bill',
      amount: '₦5,000',
      dateTime: 'Oct 5, 10:30 AM',
      status: TransactionStatus.failed,
      icon: Icons.bolt,
  ];

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final isLightMode = theme.brightness == Brightness.light;
    
    return Scaffold(
      appBar: AppBar(
        title: Text(
          'Transactions',
          style: theme.textTheme.headlineSmall?.copyWith(
            fontWeight: FontWeight.bold,
            'Filter Transactions',
            style: textTheme.titleLarge?.copyWith(
              fontWeight: FontWeight.bold,
            ),
          ),
          const SizedBox(height: 24),
          _buildFilterOption('Success', TransactionStatus.success),
          const SizedBox(height: 16),
          _buildFilterOption('Failed', TransactionStatus.failed),
          const SizedBox(height: 16),
          _buildFilterOption('Refunded', TransactionStatus.refunded),
          const SizedBox(height: 32),
          Row(
            children: [
              Expanded(
                child: OutlinedButton(
                  onPressed: () {
                    setState(() => _selectedFilters = []);
                    Navigator.pop(context);
                  },
                  style: OutlinedButton.styleFrom(
                    foregroundColor: theme.textTheme.bodyLarge?.color,
                    side: BorderSide(color: theme.dividerColor),
                    padding: const EdgeInsets.symmetric(vertical: 16),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(8),
                    ),
                  ),
                  child: const Text('Reset'),
                ),
              ),
              const SizedBox(width: 16),
              Expanded(
                child: ElevatedButton(
                  onPressed: () {
                    Navigator.pop(context);
                  },
                  style: ElevatedButton.styleFrom(
                    backgroundColor: theme.primaryColor,
                    padding: const EdgeInsets.symmetric(vertical: 16),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(8),
                    ),
                  ),
                  child: const Text('Apply'),
                ),
              ),
            ],
          ),

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final isLightMode = theme.brightness == Brightness.light;
    
    return Scaffold(
      backgroundColor: isLightMode ? Colors.white : theme.scaffoldBackgroundColor,
      appBar: AppBar(
        title: Text(
          'Transactions',
          style: Theme.of(context).textTheme.headlineSmall?.copyWith(
            fontWeight: FontWeight.bold,
            color: isLightMode ? Colors.black87 : Colors.white,
          ),
        ),
        centerTitle: true,
        backgroundColor: isLightMode ? Colors.white : theme.scaffoldBackgroundColor,
        elevation: 0,
        iconTheme: IconThemeData(
          color: isLightMode ? Colors.black87 : Colors.white,
        ),
        ),
        leading: IconButton(
          icon: const Icon(Icons.arrow_back_ios_new, size: 20),
          onPressed: () => Navigator.of(context).pop(),
        ),
        actions: [
          IconButton(
            icon: const Icon(Icons.search, size: 22),
            color: isLightMode ? Colors.black54 : Colors.white70,
            onPressed: () {
              // Implement search functionality
            },
          ),
          IconButton(
            icon: const Icon(Icons.filter_list, size: 22),
            color: isLightMode ? Colors.black54 : Colors.white70,
            onPressed: _showFilterSheet,
          ),
        ],
      ),
      body: RefreshIndicator(
        onRefresh: _refreshTransactions,
        color: Theme.of(context).primaryColor,
        backgroundColor: Theme.of(context).scaffoldBackgroundColor,
        child: _isLoading
            ? Center(child: CircularProgressIndicator(color: Theme.of(context).primaryColor))
            : ListView.builder(
                controller: _scrollController,
                padding: const EdgeInsets.all(16),
                itemCount: _filteredTransactions.length,
                itemBuilder: (context, index) {
                  return _buildTransactionItem(_filteredTransactions[index]);
                },
              ),
      ),
    );
  }
  Widget _buildTransactionItem(Transaction transaction) {
    final theme = Theme.of(context);
    final isLightMode = theme.brightness == Brightness.light;
    final statusColor = _getStatusColor(transaction.status);
    final statusText = _getStatusText(transaction.status);
    
    return Container(
      margin: const EdgeInsets.only(bottom: 12),
      decoration: ThemeUtils.getCardDecoration(context),
      child: InkWell(
        borderRadius: BorderRadius.circular(12),
        onTap: () {
          Navigator.push(
            context,
            MaterialPageRoute(
              builder: (context) => TransactionDetailsScreen(transaction: transaction),
            ),
          );
        },
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Row(
            children: [
              Container(
                padding: const EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: statusColor.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Icon(
                  transaction.icon,
                  color: statusColor,
                  size: 20,
                ),
              ),
              const SizedBox(width: 16),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      transaction.serviceName,
                      style: ThemeUtils.getBodyStyle(context).copyWith(
                        fontWeight: FontWeight.w600,
                        color: isLightMode ? Colors.black87 : Colors.white,
                      ),
                    ),
                    const SizedBox(height: 4),
                    Container(
                      padding: const EdgeInsets.symmetric(
                        horizontal: 8,
                        vertical: 2,
                      ),
                      decoration: BoxDecoration(
                        color: Color.lerp(
                          statusColor.withOpacity(0.1),
                          statusColor.withOpacity(0.1),
                          1.0,
                        )!,
                        borderRadius: BorderRadius.circular(12),
                      ),
                      child: Text(
                        statusText,
                        style: ThemeUtils.getCaptionStyle(context).copyWith(
                          color: statusColor,
                          fontWeight: FontWeight.w500,
                        ),
                      ),
                    ),
                  ],
                ),
              ),
              Column(
                crossAxisAlignment: CrossAxisAlignment.end,
                children: [
                  Text(
                    transaction.amount,
                    style: ThemeUtils.getBodyStyle(context).copyWith(
                      fontWeight: FontWeight.w600,
                      color: isLightMode ? Colors.black87 : Colors.white,
                    ),
                  ),
                  const SizedBox(height: 4),
                  Text(
                    transaction.dateTime,
                    style: ThemeUtils.getCaptionStyle(context).copyWith(
                      color: isLightMode ? Colors.grey[600] : Colors.grey[400],
                    ),
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }

  Color _getStatusColor(TransactionStatus status) {
    switch (status) {
      case TransactionStatus.success:
        return const Color(0xFF00B876);
      case TransactionStatus.refunded:
        return Colors.blue;
      case TransactionStatus.failed:
        return const Color(0xFFFF6B6B);
    }
  }

  String _getStatusText(TransactionStatus status) {
    switch (status) {
      case TransactionStatus.success:
        return 'Success';
      case TransactionStatus.refunded:
        return 'Refunded';
      case TransactionStatus.failed:
        return 'Failed';
    }
  }
}

class TransactionDetailsScreen extends StatelessWidget {
  final Transaction transaction;

  const TransactionDetailsScreen({super.key, required this.transaction});

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final isLightMode = theme.brightness == Brightness.light;
    final statusColor = _getStatusColor(transaction.status);
    final statusText = _getStatusText(transaction.status);

    return Scaffold(
      backgroundColor: isLightMode ? Colors.white : theme.scaffoldBackgroundColor,
      appBar: AppBar(
        title: Text(
          'Transaction Details',
          style: TextStyle(
            color: isLightMode ? Colors.black87 : Colors.white,
          ),
        ),
        centerTitle: true,
        backgroundColor: isLightMode ? Colors.white : Colors.transparent,
        elevation: 0,
        leading: IconButton(
          icon: Icon(
            Icons.arrow_back_ios_new,
            size: 20,
            color: isLightMode ? Colors.black87 : Colors.white,
          ),
          onPressed: () => Navigator.of(context).pop(),
        ),
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Transaction Summary Card
            Card(
              color: Theme.of(context).cardColor,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(12),
              ),
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: Column(
                  children: [
                    CircleAvatar(
                      radius: 30,
                      backgroundColor: statusColor.withOpacity(0.1),
                      child: Icon(
                        transaction.icon,
                        size: 30,
                        color: statusColor,
                      ),
                    ),
                    const SizedBox(height: 16),
                    Text(
                      transaction.amount,
                      style: TextStyle(
                        fontSize: 24,
                        fontWeight: FontWeight.bold,
                        color: isLightMode ? Colors.black87 : Colors.white,
                      ),
                    ),
                    const SizedBox(height: 8),
                    Text(
                      transaction.serviceName,
                      style: TextStyle(
                        fontSize: 16,
                        color: isLightMode ? Colors.grey[600] : Colors.grey[400],
                      ),
                    ),
                    const SizedBox(height: 4),
                    Container(
                      padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      decoration: BoxDecoration(
                        color: Color.lerp(
                          statusColor.withOpacity(0.1),
                          statusColor.withOpacity(0.1),
                          1.0,
                        )!,
                        borderRadius: BorderRadius.circular(20),
                      ),
                      child: Text(
                        statusText.toUpperCase(),
                        style: TextStyle(
                          color: statusColor,
                          fontSize: 12,
                          fontWeight: FontWeight.w600,
                          letterSpacing: 0.5,
                        ),
                      ),
                    ),
                  ],
                ),
              ),
            ),
            const SizedBox(height: 24),
            // Transaction Details
            Text(
              'Transaction Details',
              style: TextStyle(
                color: isLightMode ? Colors.black87 : Colors.white,
                fontSize: 18,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 16),
            _buildDetailRow(context, 'Transaction ID', transaction.id),
            _buildDetailRow(context, 'Date & Time', transaction.dateTime),
            _buildDetailRow(context, 'Service', transaction.serviceName),
            _buildDetailRow(context, 'Amount', transaction.amount),
            _buildDetailRow(
              context,
              'Status',
              statusText,
              valueColor: statusColor,
            ),
            const SizedBox(height: 32),
            // Action Buttons
            Row(
              children: [
                Expanded(
                  child: OutlinedButton.icon(
                    onPressed: () {
                      // Handle download receipt
                    },
                    style: OutlinedButton.styleFrom(
                      padding: const EdgeInsets.symmetric(vertical: 16),
                      foregroundColor: isLightMode ? Colors.black87 : Colors.white,
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(8),
                        side: BorderSide(
                          color: isLightMode ? Colors.grey[300]! : Colors.grey[800]!,
                        ),
                      ),
                    ),
                    icon: const Icon(Icons.receipt_long, color: Color(0xFF00B876)),
                    label: const Text('Download Receipt'),
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildDetailRow(BuildContext context, String label, String value, {Color? valueColor}) {
    final theme = Theme.of(context);
    final isLightMode = theme.brightness == Brightness.light;
    
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8.0),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Text(
            label,
            style: TextStyle(
              color: isLightMode ? Colors.grey[600] : Colors.grey[400],
              fontSize: 14,
            ),
          ),
          Text(
            value,
            style: TextStyle(
              color: valueColor ?? (isLightMode ? Colors.black87 : Colors.white),
              fontSize: 14,
              fontWeight: FontWeight.w500,
            ),
          ),
        ],
      ),
    );
  }
  
  Color _getStatusColor(TransactionStatus status) {
    switch (status) {
      case TransactionStatus.success:
        return const Color(0xFF00B876);
      case TransactionStatus.refunded:
        return Colors.blue;
      case TransactionStatus.failed:
        return const Color(0xFFFF6B6B);
    }
  }
  
  String _getStatusText(TransactionStatus status) {
    switch (status) {
      case TransactionStatus.success:
        return 'Success';
      case TransactionStatus.refunded:
        return 'Refunded';
      case TransactionStatus.failed:
        return 'Failed';
    }
  }
}
